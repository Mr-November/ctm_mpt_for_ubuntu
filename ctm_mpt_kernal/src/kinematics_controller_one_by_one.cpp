#include "ctm_mpt2.h"
#include <iostream>
#include <Eigen/Dense>

int main(int argc, char** argv)
{
    // ROS initialisation.
    // *************************************************
	ros::init(argc, argv, "kinematics_controller_node");
    ros::NodeHandle nh;
    ros::Publisher xi_publisher = nh.advertise<std_msgs::Float32MultiArray>("xid", 1);
    std_msgs::Float32MultiArray xid_message;
    std_msgs::MultiArrayDimension dim;
    dim.label = "xid";
    dim.size = N_DIM*2+1;
    dim.stride = N_DIM*2+1;
    xid_message.layout.dim.push_back(dim);
    xid_message.layout.data_offset = 0;
    // *************************************************



    // Define xis.
    // *************************************************
    Eigen::Matrix<double, Eigen::Dynamic, N_DIM> xis
    {
        {-0.643542120670999,-0.435109234251701,1.06396054296361,0.531079445992875,0.512751175596734,-0.126187629202079},
        {-0.629991951553156,-0.414707187816185,1.01493713121007,0.501631807589497,0.524511590344979,-0.112571442221774},
        {-0.614405844179615,-0.394653556269756,0.96286757820786,0.472458738929097,0.537809423782306,-0.0992862646641356},
        {-0.597021729097615,-0.375110529839358,0.908506835336449,0.443842740537998,0.552486937861115,-0.0864805712512045},
        {-0.578186398182905,-0.356233072254586,0.85277946318131,0.416068248675248,0.568309169964813,-0.0742960551291125},
        {-0.558400691015899,-0.338189503562438,0.796874377126136,0.389461090682743,0.584910435460982,-0.0628892024386991},
        {-0.538287325782608,-0.321141046455766,0.742183755705322,0.364345710102796,0.601818423438665,-0.0524130679517513},
        {-0.518677166437564,-0.305278249347861,0.690483895471835,0.3411165480891,0.618356169399275,-0.0430546255644109},
        {-0.500487905663238,-0.29076891600952,0.643695527456302,0.320131246586476,0.633755872461037,-0.0349841224748059},
        {-0.484821722859094,-0.277802766874117,0.604088658253252,0.301798664388617,0.647048839447326,-0.0283995043128926},
        {-0.472590773902283,-0.266474348277836,0.573530994873648,0.286339734074016,0.657438317117241,-0.0234058338863572},
        {-0.465365675745106,-0.25705120304132,0.555209515352755,0.274329512491368,0.663426281689383,-0.0202921493947866},
        {-0.463360291034641,-0.249433989599744,0.549568140695329,0.265590624407982,0.6648538811316,-0.0189580558442514},
        {-0.467339201789345,-0.243634894106079,0.558150183679802,0.260184098715089,0.660969271490719,-0.0194356295655853},
        {-0.476972839176254,-0.239446907755918,0.580292942372011,0.257711601599683,0.652084513142857,-0.0215109099184828},
        {-0.491798299122835,-0.236658013405775,0.615060426727964,0.257765528986861,0.638605801214838,-0.0249670512652948},
        {-0.510415473112194,-0.234842610518074,0.659613520048465,0.259504946996517,0.621858652887854,-0.0293665050733497},
        {-0.532031059936306,-0.23376346296464,0.712335605391631,0.262477285290275,0.602512332614991,-0.0344846068247657},
        {-0.5554591783804,-0.233122752550122,0.770784657833671,0.266095800458985,0.581621133676309,-0.0399824805591881},
        {-0.57984329640876,-0.232681871742844,0.833184648437081,0.269919906090766,0.559873714911439,-0.0456681524476228},
        {-0.604321891293714,-0.232228106268053,0.897706109840632,0.273551490196273,0.537966437073994,-0.051324092016369},
        {-0.628221791065211,-0.231588795774188,0.962869260610882,0.276681691930164,0.516405367287772,-0.0567888637458709},
        {-0.651024953109447,-0.230627359484827,1.02746755789644,0.27907875756804,0.495552677802275,-0.0619368682529092},
        {-0.672334193771503,-0.229228731135862,1.09049309748176,0.280558471136284,0.475672182155516,-0.0666635421632643},
        {-0.691871999672166,-0.227299323697068,1.15113098131028,0.280983391411421,0.456939396824058,-0.0708836234229703},
        {-0.709471129734588,-0.224766266494693,1.20873944115155,0.280260421151241,0.439458089204691,-0.0745289859277268},
        {-0.725044295025411,-0.221563844640684,1.26278868820889,0.278312736494642,0.423297119726204,-0.0775368237471228},
        {-0.738590819785992,-0.217642839402559,1.31287980997547,0.275096882608128,0.408484742069814,-0.0798569110663498},
        {-0.750174020525519,-0.212963244923021,1.35870584468282,0.270586425262969,0.39503111393927,-0.0814459634850316},
        {-0.759911665575975,-0.207496255728243,1.40004334872761,0.264773784092804,0.382933425648499,-0.0822697827117981},
        {-0.767962127403167,-0.201224753977409,1.43673789328451,0.25766879319537,0.372182489254751,-0.0823045085669273},
        {-0.774509969014207,-0.194144324670919,1.46869066415016,0.249298205929892,0.362767249105978,-0.0815384491326546},
        {-0.779751674089658,-0.186265290994529,1.49584694074821,0.239707444876416,0.354677115017296,-0.0799747123303175},
        {-0.783879888570858,-0.177613118915202,1.51818151815472,0.228959247998925,0.347905012573314,-0.077632396458819},
        {-0.787070143347662,-0.16822930067492,1.53568905549751,0.217134026632332,0.34244747374337,-0.0745482168951707},
        {-0.789468096724307,-0.158172331163958,1.54837328432869,0.204331244646528,0.338305443097555,-0.0707773812730992},
        {-0.79117915196025,-0.1475163705373,1.55623851432713,0.190667035501799,0.335484329593373,-0.066392677530787},
        {-0.792261045157201,-0.136349710562418,1.55928364898104,0.176272512229881,0.333993685523636,-0.0614828306742979},
        {-0.792719987668832,-0.124772490430382,1.55749958544655,0.161291613231278,0.333846282124817,-0.0561498279031368},
        {-0.792509810820197,-0.112892705994322,1.55086793496291,0.145876083868535,0.335058018794991,-0.050504846462718},
        {-0.791535529605173,-0.100823283479394,1.53936541046817,0.130183427370416,0.337646068147243,-0.0446644106229268},
        {-0.789659867382587,-0.0886772747248113,1.52296873114763,0.114371028464504,0.341628686655248,-0.0387454225251531},
        {-0.786712677259125,-0.076564558622205,1.50166322226845,0.0985931832546579,0.347023800632798,-0.0328611214697585},
        {-0.78250300362638,-0.0645882682932079,1.47545289528282,0.0829971319783585,0.353848166501899,-0.0271171727977452},
        {-0.776832615140995,-0.0528420892848921,1.444371748309,0.0677201077177812,0.362116315074262,-0.0216086684973843},
        {-0.769510669764284,-0.0414084088457316,1.40849629848603,0.0528872762456977,0.371838918152706,-0.0164180979297667},
        {-0.76036845375824,-0.0303570828774224,1.36795811242291,0.0386100488952653,0.383020768950188,-0.0116141740875582},
        {-0.749273916635298,-0.0197449267012061,1.32295694165007,0.0249850730637897,0.395657519022496,-0.00725151535883047},
        {-0.736145323055896,-0.00961563140657478,1.27377386862605,0.0120934303068607,0.409731124885802,-0.00337091496622659},
        {-0.720964358162893,4.41463346761756e-17,1.22078598927277,-1.96317359975744e-16,0.42520287244712,2.60361668365313e-17}
    };
    // *************************************************



    // Singleton.
    // *************************************************
    // ros::Duration(10).sleep();
    // xid_message.data = std::vector<float> {
    //     -0.365467883136319,0.476319557971102,1.35266395204509,-0.6697061329388,-0.364902661292886,0.476193726445663, 0,0,0,0,0,0, 0,0,0,0,0,0
    // };
    // xi_publisher.publish(xid_message);
    // *************************************************



    Eigen::Matrix<double, 1, N_DIM> xi_last = Eigen::Matrix<double, 1, N_DIM>::Zero();
    Eigen::Matrix<double, 1, N_DIM> xi = Eigen::Matrix<double, 1, N_DIM>::Zero();
    Eigen::Matrix<double, 1, N_DIM*3> xi_msg_mat = Eigen::Matrix<double, 1, N_DIM*3>::Zero();
    
    // Publish the first point before start, with zero forward dot and diff.
    ros::Duration(10).sleep();
    xi = xis.row(0);
    xi_msg_mat.block(0,0,1,N_DIM) = xi;
    xi_last = xi;
    xid_message.data = std::vector<float>(xi_msg_mat.data(), xi_msg_mat.data()+N_DIM*3);
    xid_message.data.push_back(1.0);
    xi_publisher.publish(xid_message);
    // *************************************************

    ros::Duration(65).sleep();
    ROS_INFO("The kinematics controller is ready.");
    ros::Rate loop_rate(KR);
    size_t i = 0;
    while (ros::ok() && (i < xis.rows()))
    {
        xi = xis.row(i);
        xi_msg_mat.block(0,0,1,N_DIM) = xi;
        xi_msg_mat.block(0,N_DIM*2,1,N_DIM) = (xi - xi_last) * KRDCR;
        xi_last = xi;
        xid_message.data = std::vector<float>(xi_msg_mat.data(), xi_msg_mat.data()+N_DIM*3);
        xid_message.data.push_back(1.0);
        xi_publisher.publish(xid_message);
        i++;

        if(!loop_rate.sleep())
        {
            ROS_WARN("The kinematics controller did not meet the desired rate.");
        }
    }
    // Publish the last point after finishing, with zero forward dot and diff.
    std::fill(xid_message.data.begin()+N_DIM, xid_message.data.end(), 0);
    xi_publisher.publish(xid_message);
    ROS_INFO("Task completed.");

    return 0;
}
