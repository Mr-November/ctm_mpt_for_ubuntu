#include "ctm_mpt2.h"
#include <iostream>
#include <Eigen/Dense>

int main(int argc, char** argv)
{
    // ROS initialisation.
    // *************************************************
	ros::init(argc, argv, "kinematics_controller_node");
    ros::NodeHandle nh;
    ros::Publisher xi_publisher = nh.advertise<std_msgs::Float32MultiArray>("xid", 1);
    std_msgs::Float32MultiArray xid_message;
    std_msgs::MultiArrayDimension dim;
    dim.label = "xid";
    dim.size = N_DIM*2+1;
    dim.stride = N_DIM*2+1;
    xid_message.layout.dim.push_back(dim);
    xid_message.layout.data_offset = 0;
    // *************************************************



    // Define xis.
    // *************************************************
    Eigen::Matrix<double, Eigen::Dynamic, N_DIM> xis
    {
        {-0.628603959627071,0.284215513515588,0.874177039537311,-1.2083703035362,-0.628605094097491,0.284215425941448},
        {-0.631042023625799,0.304772359044844,0.897767885072163,-1.23351365431919,-0.630874139829243,0.304245948749571},
        {-0.633706009822633,0.325502399846472,0.922118738162239,-1.25897921056706,-0.633524021371432,0.324969354500987},
        {-0.635884730528807,0.345427649963817,0.945968079398382,-1.28249851931479,-0.635687372001603,0.344885281781693},
        {-0.63759480093361,0.364604959408019,0.969327553985363,-1.30418046086946,-0.637383683932657,0.364058578159161},
        {-0.6388439116379,0.383074749518849,0.992191945049126,-1.32409913775232,-0.638621797967275,0.382531669113048},
        {-0.639611501193687,0.400836973240906,1.01450223867576,-1.34223626289583,-0.639372725234141,0.400283881105457},
        {-0.639941100441274,0.417972326517386,1.03631737406949,-1.3587668623618,-0.639693442848919,0.417427569122529},
        {-0.639800142650025,0.434460320371647,1.05755290073571,-1.3736297482631,-0.639538331403475,0.433912304950717},
        {-0.639203328068251,0.450338726587466,1.07821169372149,-1.38690424584419,-0.638925589550474,0.449784503536599},
        {-0.638169888345012,0.465648158443875,1.09830557845507,-1.39867952613431,-0.637881126602714,0.465097956085557},
        {-0.636691300928341,0.480392793547806,1.11779182480559,-1.40896052874502,-0.636391723891323,0.479846988875585},
        {-0.634755772734134,0.494571402089103,1.13661918322943,-1.41774168689329,-0.634438234987113,0.494017524605055},
        {-0.632393939839311,0.508232020743054,1.1548207051069,-1.42513785123419,-0.632064333685081,0.507680988312261},
        {-0.629598075610772,0.521375194671464,1.17235243452706,-1.43115263682967,-0.629257551423773,0.520829039359649},
        {-0.626370361510578,0.53401191036531,1.18918956790316,-1.43581702726148,-0.62601992360683,0.533472223173711},
        {-0.62269923155798,0.546136000422922,1.20527784269368,-1.4391234268716,-0.622331916872925,0.545592398342902},
        {-0.618615531690794,0.557789043436005,1.22065195383769,-1.44118038708724,-0.618240447747904,0.557255231481976},
        {-0.614097151375985,0.568950989079377,1.23523491670681,-1.44195160384618,-0.61370972233803,0.568420340627591},
        {-0.609158375454925,0.579642308843428,1.2490268719382,-1.44149937096916,-0.608761390277684,0.579118553003592},
        {-0.603789807137756,0.589856183777896,1.26197726144819,-1.43982324420135,-0.603379679322049,0.589334082569903},
        {-0.598008094626004,0.599614368877421,1.27409291353294,-1.43699177287146,-0.597591595314338,0.599101037705894},
        {-0.591806233159098,0.60891295926155,1.28533060877521,-1.43301402811183,-0.591388143958803,0.608408455206606},
        {-0.585170622664557,0.617746797234576,1.29563847322556,-1.42789291518404,-0.584760427867356,0.617235204978935},
        {-0.578107179696949,0.626160494042495,1.3050348065528,-1.42171969342794,-0.577777824472663,0.625598024592676},
        {-0.570544261424769,0.634292274192112,1.31354378109179,-1.41464935662787,-0.570666703882972,0.633381533170055},
        {-0.562755012816723,0.642232518020207,1.32152904438537,-1.40704155358209,-0.563489580090754,0.640988188831199},
        {-0.554922656338841,0.649810873346443,1.32904001951603,-1.39885421218077,-0.555989313476561,0.648745827358159},
        {-0.546948367356466,0.656575327369372,1.33559617252676,-1.38952054956552,-0.547617226922604,0.656661914768622},
        {-0.537877124585887,0.66257821846438,1.33994875561546,-1.37823010384673,-0.538367952614996,0.663010103944371},
        {-0.528284357536564,0.668228570411962,1.34312186994551,-1.36599988672333,-0.528779653198712,0.668658955014156},
        {-0.518249969743988,0.673414441870753,1.34514000749766,-1.35284153456982,-0.518745685052105,0.673832082077012},
        {-0.507795538785246,0.678158874334162,1.34603644768013,-1.33883753483193,-0.508305847688267,0.678573733027998},
        {-0.49687517810884,0.682418338376048,1.34568587092662,-1.32392503078004,-0.497384757471075,0.682817556014334},
        {-0.485507699127379,0.686216420804482,1.34412016263032,-1.3081847635545,-0.486020752545956,0.686603346823069},
        {-0.473674950070739,0.689540327263404,1.34128479093664,-1.29161965164492,-0.474188875396716,0.689913159880117},
        {-0.461382468708258,0.692401918052925,1.33718474136466,-1.27428385911848,-0.461906312310495,0.692767216351661},
        {-0.448589543622192,0.694768618569133,1.33171527920798,-1.25613956234102,-0.449110961406676,0.695117864772586},
        {-0.435312364576747,0.696664779637698,1.32491201604888,-1.23726556066321,-0.435840462904022,0.697004238622492},
        {-0.421508119686955,0.698059017917573,1.31667008130927,-1.21762681284272,-0.422031911057443,0.698381818905726},
        {-0.407190088182778,0.698975107730437,1.30702317415869,-1.1972985152729,-0.407719926352074,0.699287822960966},
        {-0.392310813550479,0.699380996805435,1.29586060010305,-1.17624415159086,-0.392837024125435,0.699678060069418},
        {-0.376863297560546,0.699284399064944,1.28317238015876,-1.15450522468083,-0.37738610622054,0.69956630033117},
        {-0.360842560079038,0.698696317439686,1.26895593946836,-1.13212751037068,-0.361374291091583,0.698969725104261},
        {-0.344175037939654,0.697567966935137,1.2530469615627,-1.10904204481944,-0.344697395223763,0.697823609857052},
        {-0.32687735746278,0.695933636415671,1.23550049848763,-1.0853368590073,-0.327401741535773,0.696177383626731},
        {-0.308888096598321,0.693760975992468,1.21618801237452,-1.06097297929815,-0.309408304473285,0.693990070582326},
        {-0.290185079327539,0.691054668006791,1.19507784679322,-1.03597968299483,-0.290704162001949,0.691270630647066},
        {-0.270711961643432,0.687793297144302,1.17206092268761,-1.01033699820293,-0.271224918011927,0.687994237194992},
        {-0.250421494828783,0.683966766319099,1.14705358715619,-0.984044741902094,-0.250924180265023,0.684151439953203}
    };
    // *************************************************

    // Define ts.
    // *************************************************
    Eigen::Matrix<double, 1, Eigen::Dynamic> ts
    {
        {0,0.973595831119704,1.97203349383948,2.96441495837602,3.97927145733776,5.01570720115636,6.0732836278086,7.15029881338038,8.24787110690486,9.36612148464128,10.5047583906578,11.6631864352031,12.8406808926986,14.0368015869033,15.2507000128278,16.4815295472888,17.728226578675,18.990072771295,20.2657537115168,21.5542532017692,22.8542429223005,24.1646192633077,25.4839504779516,26.8105493804349,28.1422732222601,29.4715218506409,30.8043602463556,32.1511288067515,33.5195689325831,34.8687120408926,36.2082027729911,37.5430615559974,38.8722128956523,40.1936052595753,41.5061153883654,42.808143630733,44.0984827617937,45.375309532276,46.6376956037363,47.883925551278,49.113179863982,50.3238434478796,51.5149789141778,52.6857695570817,53.8345378240126,54.9609796796218,56.0638253614422,57.1424664795623,58.1959713213575,59.2236745345998}
    };
    ts = ts / 2.0;
    // ts = Eigen::Matrix<double, 1, Eigen::Dynamic>::LinSpaced(xis.rows(), 0.0, 193.814897133206);
    // *************************************************

    // test
    


    // Singleton.
    // *************************************************
    // ros::Duration(10).sleep();
    // xid_message.data = std::vector<float> {
    //     -0.365467883136319,0.476319557971102,1.35266395204509,-0.6697061329388,-0.364902661292886,0.476193726445663, 0,0,0,0,0,0, 0,0,0,0,0,0
    // };
    // xi_publisher.publish(xid_message);
    // *************************************************



    // Trajectory.
    // *************************************************
    // Interpolation.
    XiSpFunc<N_DIM> xisf(ts, xis.transpose());

    // Publish the first point before start, with zero forward dot and diff.
    ros::Duration(10).sleep();
    float time_cur = 0.0;
    const float* xi_msg_array = xisf(time_cur).data();
    xid_message.data = std::vector<float>(xi_msg_array, xi_msg_array+N_DIM*3);
    xid_message.data.push_back(1.0);
    std::fill(xid_message.data.begin()+N_DIM, xid_message.data.end(), 0);
    xi_publisher.publish(xid_message);
    // *************************************************

    ros::Duration(90).sleep();
    ROS_INFO("The kinematics controller is ready.");
    ros::Time time_start = ros::Time::now();
    ros::Rate loop_rate(KR);
    while (ros::ok())
    {
        time_cur = (ros::Time::now()-time_start).toSec();
        if (time_cur > ts(ts.cols()-1)) break;
        xi_msg_array = xisf(time_cur).data();
        xid_message.data = std::vector<float>(xi_msg_array, xi_msg_array+N_DIM*3);

        xid_message.data.push_back(1.0);
        
        // if (time_cur <= ts(10))
        // {
        //     xid_message.data.push_back(1.0);
        // }
        // else if (time_cur <= ts(20))
        // {
        //     xid_message.data.push_back(2.0);
        // }
        // else if (time_cur <= ts(30))
        // {
        //     xid_message.data.push_back(3.0);
        // }
        // else
        // {
        //     xid_message.data.push_back(4.0);
        // }
        
        xi_publisher.publish(xid_message);
        if(!loop_rate.sleep())
        {
            ROS_WARN("The kinematics controller did not meet the desired rate.");
        }
    }
    // Publish the last point after finishing, with zero forward dot and diff.
    std::fill(xid_message.data.begin()+N_DIM, xid_message.data.end(), 0);
    xi_publisher.publish(xid_message);
    ROS_INFO("Task completed.");

    return 0;
}
